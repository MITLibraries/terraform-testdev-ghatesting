name: Terraform Apply for PR (global)
on: 
  workflow_dispatch:

# Set defaults
defaults:
  run:
    shell: bash

jobs:
  generate-matrix:
    # See https://github.community/t/check-pushed-file-changes-with-git-diff-tree-in-github-actions/17220/10 for the 
    #   source of this block of code. The first job builds the matrix of folders with terraform changes. 
    name: Generate matrix for build
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - name: Check changed files
        id: diff
        # The awk/sed/grep filtering on the output from `git diff` does the following
        #   * isolates just the folder paths (awk)
        #   * strips trailing slashes (sed)
        #   * isolates just the `shared/core` folder (grep)
        # The final line before setting the outpu from this step is to escape newlines (replace \n with %0A)
        run: |
          if [ $GITHUB_BASE_REF ]; then
            # Pull Request
            git fetch origin $GITHUB_BASE_REF --depth=1
            export DIFF=$( git diff --dirstat=files,0,cumulative origin/$GITHUB_BASE_REF $GITHUB_SHA | awk -F ' ' '{print $2}' | sed 's:/*$::' | grep -E '(/core)' )
            echo "PR Diff between origin/$GITHUB_BASE_REF and $GITHUB_SHA"
          else
            # Push
            git fetch origin ${{ github.event.before }} --depth=1
            export DIFF=$( git diff --dirstat=files,0,cumulative ${{ github.event.before }} $GITHUB_SHA | awk -F ' ' '{print $2}' | sed 's:/*$::' | grep -E '(/core)' )
            echo "Push Diff between ${{ github.event.before }} and $GITHUB_SHA"
          fi
          echo "$DIFF"

          echo "::set-output name=diff::$( echo "$DIFF" | sed ':a;N;$!ba;s/\n/%0A/g' )"
      - name: Set matrix for build
        # This block actually creates the matrix. See https://stackoverflow.com/a/62953566/11948346 for the original source of
        #   this code. It sets two variables, DIFF and JSON, and then loops through the lines, only adding entries if it doesn't
        #   already exist. Finally, it removes the trailing comma and adds the closing brackets with the result being a properly
        #   formatted matrix for the next job.
        id: set-matrix
        run: |
          DIFF="${{ steps.diff.outputs.diff }}"
          JSON="{\"tfpaths\":["

          while read path; do
            JSONline="\"$path\","
            if [[ "$JSON" != *"$JSONline"* ]]; then
              JSON="$JSON$JSONline"
            fi
          done <<< "$DIFF"

          if [[ $JSON == *, ]]; then
            JSON="${JSON%?}"
          fi
          JSON="$JSON]}"
          echo $JSON

          echo "::set-output name=matrix::$( echo "$JSON" )"

  tfapply:
    # Set workflow environment variables
    env:
      AWS_DEFAULT_REGION: us-east-1
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      PIPENV_PIPFILE: ../../scripts/Pipfile
      TF_WORKSPACE: global
    
    # This splits out a matrix of jobs that processes each of the folders with updates to terraform code.
    name: Run Terraform Apply on "${{ matrix.tfpaths }}"
    needs: generate-matrix
    strategy:
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      # Checkout the repo first
      - name: Checkout
        uses: actions/checkout@v2

      # # Output of all environment variables for testing. This is left in here and commented out to make future troubleshooting easy
      # - name: echo-default-env-variables
      #   run: |
      #       echo "Home: ${HOME}"
      #       echo "GITHUB_WORKFLOW: ${GITHUB_WORKFLOW}"
      #       echo "GITHUB_ACTION: ${GITHUB_ACTION}"
      #       echo "GITHUB_ACTION_PATH: ${GITHUB_ACTION_PATH}"
      #       echo "GITHUB_ACTOR: ${GITHUB_ACTOR}"
      #       echo "GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}"
      #       echo "GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME}"
      #       echo "GITHUB_WORKSPACE: ${GITHUB_WORKSPACE}"
      #       echo "GITHUB_SHA: ${GITHUB_SHA}"
      #       echo "GITHUB_REF: ${GITHUB_REF}"
      #       echo "GITHUB_HEAD_REF: ${GITHUB_HEAD_REF}"
      #       echo "GITHUB_BASE_REF: ${GITHUB_BASE_REF}"
      
      # Setup terraform with the correct version
      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.13.7

      # Create the terraform.tfvars file. This expects that all the commands are run in subfolders
      #   that are two (2) folders deep in the repository. It also depends on the PIPENV_PIPFILE environment
      #   variable, the TF_WORKSPACE environment variable, and the GITHUB_HEAD_REF default environment variable.
      #   The end result of this step is a correct terraform.tfvars file.
      - name: Create tfvars
        run: |
          echo "working directory = ${{ matrix.tfpaths }}/"
          pip install pipenv
          pipenv install
          pipenv run python ../../scripts/parameter_export.py -p ${{ matrix.tfpaths }} -b ${GITHUB_HEAD_REF}
        working-directory: ${{ matrix.tfpaths }}/

      # Run Terraform Apply for global environment
      - name: Terraform Apply (global)
        id: tfapplyglobal
        run: |
          echo "${{ matrix.tfpaths }}"
          terraform init -backend-config=backend.hcl
          terraform apply -no-color -auto-approve -var-file=terraform.tfvars
        working-directory: ${{ matrix.tfpaths }}/
        continue-on-error: true
      
      # Publish the apply output in the Pull Request for global workspace
      - name: output 
        uses: actions/github-script@v3
        env:
          APPLY: "terraform\n${{ steps.tfapplyglobal.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Apply ðŸ“–\`${{ steps.tfapplyglobal.outcome }}\`
            
            <details><summary>Show Apply</summary>
            
            \`\`\`${process.env.APPLY}\`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      # Proper exit status for failed terraform apply in the global environment
      - name: Terraform Apply Status (global)
        if: steps.tfapplyglobal.outcome == 'failure'
        run: exit 1